version: "3"

services:
  commodity:
    image: openjdk
    volumes:
      - $JARFILE:/app/application.jar
      - ${PWD}/application-commodity.properties:/app/application.properties
    working_dir: /app
    command: java -jar ./application.jar -DPROP_FILE=application.properties
    ports:
      - "8080:80"
    healthcheck:
      test: [ "CMD", "curl", "http://localhost" ]
      interval: 5s
      timeout: 5s
      retries: 20


  javanode-outcome:
    image: openjdk
    volumes:
      - $JARFILE:/app/application.jar
      - ${PWD}/application-outcomenode.properties:/app/application.properties
      - ./data:/data
    working_dir: /app
    command: java -jar ./application.jar -DPROP_FILE=application.properties

{% for n in range(num_datanodes) %}
  javanode{{n}}:
    image: openjdk
    volumes:
      - $JARFILE:/app/application.jar
      - ${PWD}/application-datanode{{n}}.properties:/app/application.properties
      - ./data:/data
    working_dir: /app
    command: java -jar ./application.jar -DPROP_FILE=application.properties

  pythonnode{{n}}:
    build: ../..
    volumes:
      - ..:/app
      - ./data:/data
    command: >
      poetry run python -m verticox.datanode --data-path /data/features_{{n}}.parquet
      --commodity-address
      commodity --address pythonnode{{n}} --include-column event_happened

{% endfor %}
  aggregator:
    build: ../..
    volumes:
      - ..:/app
      - ./data:/data
    command: >
      poetry run python tests/test_mock.py train
      --pythonnodes {% for n in range(num_datanodes) %}pythonnode{{n}}:7777{% endfor %}
      --javanodes {% for n in range(num_datanodes) %}javanode{{n}}{% endfor %}
      /data/outcome.parquet /data event_time
      event_happened
    depends_on:
      commodity:
        condition: service_healthy
    environment:
      - LOGLEVEL=INFO
